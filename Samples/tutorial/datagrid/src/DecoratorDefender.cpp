/*
 * Copyright (c) 2006 - 2008
 * Wandering Monster Studios Limited
 *
 * Any use of this program is governed by the terms of Wandering Monster
 * Studios Limited's Licence Agreement included with this program, a copy
 * of which can be obtained by contacting Wandering Monster Studios
 * Limited at info@wanderingmonster.co.nz.
 *
 */

#include "DecoratorDefender.h"
#include <Rocket/Core/Math.h>
#include <Rocket/Core/Element.h>
#include <Rocket/Core/Texture.h>
#include <ShellOpenGL.h>

DecoratorDefender::~DecoratorDefender()
{
}

bool DecoratorDefender::Initialise(const Rocket::Core::String& image_source, const Rocket::Core::String& image_path)
{
	image_index = LoadTexture(image_source, image_path);
	if (image_index == -1)
	{
		return false;
	}

	return true;
}

/// Called on a decorator to generate any required per-element data for a newly decorated element.
Rocket::Core::DecoratorDataHandle DecoratorDefender::GenerateElementData(Rocket::Core::Element* ROCKET_UNUSED(element))
{
	return NULL;
}

// Called to release element data generated by this decorator.
void DecoratorDefender::ReleaseElementData(Rocket::Core::DecoratorDataHandle ROCKET_UNUSED(element_data))
{
}

// Called to render the decorator on an element.
void DecoratorDefender::RenderElement(Rocket::Core::Element* element, Rocket::Core::DecoratorDataHandle ROCKET_UNUSED(element_data))
{
	Rocket::Core::Vector2f position = element->GetAbsoluteOffset(Rocket::Core::Box::PADDING);
	Rocket::Core::Vector2f size = element->GetBox().GetSize(Rocket::Core::Box::PADDING);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, (GLuint) GetTexture(image_index)->GetHandle(element->GetRenderInterface()));
	Rocket::Core::Colourb colour = element->GetProperty< Rocket::Core::Colourb >("color");
	glColor4ubv(element->GetProperty< Rocket::Core::Colourb >("color"));
	glBegin(GL_QUADS);

		glVertex2f(position.x, position.y);
		glTexCoord2f(0, 1);

		glVertex2f(position.x, position.y + size.y);
		glTexCoord2f(1, 1);

		glVertex2f(position.x + size.x, position.y + size.y);
		glTexCoord2f(1, 0);

		glVertex2f(position.x + size.x, position.y);
		glTexCoord2f(0, 0);

	glEnd();
	glColor4ub(255, 255, 255, 255);
}
